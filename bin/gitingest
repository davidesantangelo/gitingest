#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "gitingest"

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: gitingest [OPTIONS]"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-r", "--repository REPO", "GitHub repository (username/repo) [Required]") do |repo|
    options[:repository] = repo
  end

  opts.on("-t", "--token TOKEN", "GitHub personal access token") do |token|
    options[:token] = token
  end

  opts.on("-o", "--output FILE", "Output file for the prompt") do |file|
    options[:output_file] = file
  end

  opts.on("-b", "--branch BRANCH", "Repository branch [Default: main]") do |branch|
    options[:branch] = branch
  end

  opts.on("-e", "--exclude PATTERN", "File patterns to exclude (comma separated)") do |pattern|
    options[:exclude] = pattern.split(",")
  end

  opts.on("-T", "--threads COUNT", Integer, "Number of concurrent threads [Default: auto-detected]") do |threads|
    options[:threads] = threads
  end

  opts.on("-W", "--thread-timeout SECONDS", Integer,
          "Thread pool shutdown timeout in seconds [Default: 60]") do |timeout|
    options[:thread_timeout] = timeout
  end

  opts.on("-s", "--show-structure", "Show repository directory structure") do
    options[:show_structure] = true
  end

  opts.on("-q", "--quiet", "Reduce logging to errors only") do
    options[:quiet] = true
  end

  opts.on("-v", "--verbose", "Increase logging verbosity") do
    options[:verbose] = true
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end

  opts.separator ""
  opts.separator "Examples:"
  opts.separator "  gitingest -r user/repo                      # Basic usage with public repository"
  opts.separator "  gitingest -r user/repo -t YOUR_TOKEN        # With GitHub token for private repositories"
  opts.separator "  gitingest -r user/repo -o custom_prompt.txt # Custom output file"
  opts.separator "  gitingest -r user/repo -T 8                 # Use 8 threads for processing"
  opts.separator "  gitingest -r user/repo -s                   # Show repository directory structure"
end

begin
  parser.parse!

  if options[:repository].nil?
    puts "Error: Repository option is required"
    puts parser
    exit 1
  end

  generator = Gitingest::Generator.new(options)
  generator.run
rescue OptionParser::InvalidOption => e
  puts "Error: #{e.message}"
  puts parser
  exit 1
rescue StandardError => e
  puts "Error: #{e.message}"
  exit 1
end
